import { Injectable, Component, EventEmitter, Input, Output, ChangeDetectionStrategy, ElementRef, Renderer2, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';
import { Subject } from 'rxjs/internal/Subject';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function BoardComponent_tile_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tile", 1);
} if (rf & 2) {
    const tileData_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("data", tileData_r1);
} }
const PieceRotation = {
    DEG_0: 0,
    DEG_90: 1,
    DEG_180: 2,
    DEG_270: 3,
};
PieceRotation[PieceRotation.DEG_0] = 'DEG_0';
PieceRotation[PieceRotation.DEG_90] = 'DEG_90';
PieceRotation[PieceRotation.DEG_180] = 'DEG_180';
PieceRotation[PieceRotation.DEG_270] = 'DEG_270';
/** @enum {number} */
const PieceTypes = {
    Dot: 1,
    Box: 2,
    Line: 3,
    T: 4,
    L: 5,
    Lr: 6,
    Z: 7,
    S: 8,
};
PieceTypes[PieceTypes.Dot] = 'Dot';
PieceTypes[PieceTypes.Box] = 'Box';
PieceTypes[PieceTypes.Line] = 'Line';
PieceTypes[PieceTypes.T] = 'T';
PieceTypes[PieceTypes.L] = 'L';
PieceTypes[PieceTypes.Lr] = 'Lr';
PieceTypes[PieceTypes.Z] = 'Z';
PieceTypes[PieceTypes.S] = 'S';
/** @enum {string} */
const PieceColors = {
    Box: 'color-box',
    Dot: 'color-dot',
    Line: 'color-line',
    T: 'color-t',
    L: 'color-l',
    Lr: 'color-lr',
    Z: 'color-z',
    S: 'color-s',
};
class Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     * @param {?} maps
     */
    constructor(x, y, gridSize, maps) {
        this.color = 'red';
        this.rotation = PieceRotation.DEG_0;
        this.map = [
            [], []
        ];
        this._lastConfig = null;
        this._gridSize = gridSize;
        this.x = x;
        this.y = y;
        this._maps = maps;
        this.map = this._maps[this.rotation];
    }
    /**
     * @return {?}
     */
    get positionsOnGrid() {
        /** @type {?} */
        const acc = [];
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (this.map[row][col]) {
                    /** @type {?} */
                    const pos = (this.y + row) * this._gridSize.width + this.x + col;
                    if (pos > 0) {
                        acc.push(pos);
                    }
                }
            }
        }
        return acc;
    }
    /**
     * @return {?}
     */
    store() {
        this._lastConfig = {
            x: this.x,
            y: this.y,
            rotation: this.rotation,
            map: this.map
        };
    }
    /**
     * @return {?}
     */
    clearStore() {
        this._lastConfig = null;
    }
    /**
     * @return {?}
     */
    revert() {
        if (this._lastConfig) {
            for (const x in this._lastConfig) {
                if (this._lastConfig.hasOwnProperty(x)) {
                    this[x] = this._lastConfig[x];
                }
            }
            this._lastConfig = null;
        }
    }
    /**
     * @return {?}
     */
    rotate() {
        /** @type {?} */
        const keys = Object.keys(this._maps);
        /** @type {?} */
        let idx = keys.indexOf(this.rotation.toString());
        if (idx >= keys.length - 1) {
            this.rotation = /** @type {?} */ (keys[0]);
        }
        else {
            this.rotation = /** @type {?} */ (keys[++idx]);
        }
        this.map = this._maps[this.rotation];
    }
    /**
     * @return {?}
     */
    moveDown() {
        this.y++;
    }
    /**
     * @return {?}
     */
    moveRight() {
        this.x++;
    }
    /**
     * @return {?}
     */
    moveLeft() {
        this.x--;
    }
    /**
     * @return {?}
     */
    get bottomRow() {
        return this.y + 3;
    }
    /**
     * @return {?}
     */
    get rightCol() {
        /** @type {?} */
        let col = 3;
        while (col >= 0) {
            for (let row = 0; row <= 3; row++) {
                if (this.map[row][col]) {
                    return this.x + col;
                }
            }
            col--;
        }
    }
    /**
     * @return {?}
     */
    get leftCol() {
        return this.x;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS = [];
MAPS[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Box, undefined, undefined, undefined],
];
class Dot extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS);
        this.color = PieceColors['Dot'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$1 = [];
MAPS$1[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],
    [PieceTypes.Box, PieceTypes.Box, undefined, undefined],
];
class Box extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$1);
        this.color = PieceColors['Box'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$2 = [];
MAPS$2[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line],
];
MAPS$2[PieceRotation.DEG_90] = [
    [PieceTypes.Line, undefined, undefined, undefined],
    [PieceTypes.Line, undefined, undefined, undefined],
    [PieceTypes.Line, undefined, undefined, undefined],
    [PieceTypes.Line, undefined, undefined, undefined],
];
class Line extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$2);
        this.color = PieceColors['Line'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$3 = {};
MAPS$3[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, PieceTypes.T, undefined, undefined],
    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],
];
MAPS$3[PieceRotation.DEG_90] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.T, undefined, undefined, undefined],
    [PieceTypes.T, PieceTypes.T, undefined, undefined],
    [PieceTypes.T, undefined, undefined, undefined],
];
MAPS$3[PieceRotation.DEG_180] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],
    [undefined, PieceTypes.T, undefined, undefined],
];
MAPS$3[PieceRotation.DEG_270] = [
    [undefined, undefined, undefined, undefined],
    [undefined, PieceTypes.T, undefined, undefined],
    [PieceTypes.T, PieceTypes.T, undefined, undefined],
    [undefined, PieceTypes.T, undefined, undefined],
];
class T extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$3);
        this.color = PieceColors['T'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$4 = {};
MAPS$4[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [undefined, PieceTypes.Z, undefined, undefined],
    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],
    [PieceTypes.Z, undefined, undefined, undefined],
];
MAPS$4[PieceRotation.DEG_90] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Z, PieceTypes.Z, undefined, undefined],
    [undefined, PieceTypes.Z, PieceTypes.Z, undefined],
];
class Z extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$4);
        this.color = PieceColors['Z'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$5 = {};
MAPS$5[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.S, undefined, undefined, undefined],
    [PieceTypes.S, PieceTypes.S, undefined, undefined],
    [undefined, PieceTypes.S, undefined, undefined],
];
MAPS$5[PieceRotation.DEG_90] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, PieceTypes.S, PieceTypes.S, undefined],
    [PieceTypes.S, PieceTypes.S, undefined, undefined],
];
class S extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$5);
        this.color = PieceColors['S'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$6 = {};
MAPS$6[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.L, undefined, undefined, undefined],
    [PieceTypes.L, undefined, undefined, undefined],
    [PieceTypes.L, PieceTypes.L, undefined, undefined],
];
MAPS$6[PieceRotation.DEG_90] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],
    [PieceTypes.L, undefined, undefined, undefined],
];
MAPS$6[PieceRotation.DEG_180] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.L, PieceTypes.L, undefined, undefined],
    [undefined, PieceTypes.L, undefined, undefined],
    [undefined, PieceTypes.L, undefined, undefined],
];
MAPS$6[PieceRotation.DEG_270] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, PieceTypes.L, undefined],
    [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],
];
class L extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$6);
        this.color = PieceColors['L'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPS$7 = {};
MAPS$7[PieceRotation.DEG_0] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],
    [undefined, PieceTypes.Lr, undefined, undefined],
    [undefined, PieceTypes.Lr, undefined, undefined],
];
MAPS$7[PieceRotation.DEG_90] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, PieceTypes.Lr, undefined],
    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],
];
MAPS$7[PieceRotation.DEG_180] = [
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Lr, undefined, undefined, undefined],
    [PieceTypes.Lr, undefined, undefined, undefined],
    [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],
];
MAPS$7[PieceRotation.DEG_270] = [
    [undefined, undefined, undefined, undefined],
    [undefined, undefined, undefined, undefined],
    [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],
    [PieceTypes.Lr, undefined, undefined, undefined],
];
class Lr extends Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     */
    constructor(x, y, gridSize) {
        super(x, y, gridSize, MAPS$7);
        this.color = PieceColors['Lr'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PiecesFactory {
    /**
     * @param {?} gridSize
     */
    constructor(gridSize) {
        this._available = [];
        this._gridSize = gridSize;
        this._available.push(Dot);
        this._available.push(Box);
        this._available.push(Line);
        this._available.push(T);
        this._available.push(Z);
        this._available.push(S);
        this._available.push(L);
        this._available.push(Lr);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    getRandomPiecePiece(x, y) {
        /** @type {?} */
        const idx = Math.floor(Math.random() * (this._available.length));
        return new this._available[idx](x, y, this._gridSize);
        // return new this._available[2](x, y, this._gridSize);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const SPAWN_POSITION_X = 4;
/** @type {?} */
const SPAWN_POSITION_Y = -4;
class Tile {
    constructor() {
        this.solid = false;
        this.color = null;
    }
}
class GameManagerService {
    constructor() {
        this.settings = {
            tileSize: null
        };
        this._gridSize = { width: 0, height: 0 };
        this._locked = true;
        this._lineCleared = new Subject();
        this._gameOver = new Subject();
        this.lineCleared$ = this._lineCleared.asObservable();
        this.gameOver$ = this._gameOver.asObservable();
    }
    /**
     * @return {?}
     */
    get elementsInRow() {
        return this._gridSize.width;
    }
    /**
     * @param {?} width
     * @param {?} height
     * @param {?} gameSpeed
     * @param {?=} tileSize
     * @return {?}
     */
    initialize(width, height, gameSpeed, tileSize) {
        this._gridSize.width = width;
        this._gridSize.height = height;
        this._gameSpeed = gameSpeed;
        this._piecesFactory = new PiecesFactory(this._gridSize);
        if (tileSize) {
            this.settings.tileSize = tileSize;
        }
        this._initializeEmptyBoard();
        this._spawnNewPiece();
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    start() {
        clearInterval(this._gameInterval);
        this._gameInterval = setInterval(() => {
            this._update();
        }, this._gameSpeed);
        this._locked = false;
    }
    /**
     * @return {?}
     */
    stop() {
        this._locked = true;
        clearInterval(this._gameInterval);
    }
    /**
     * @return {?}
     */
    reset() {
        /** @type {?} */
        const emptyTile = new Tile();
        for (let pos = 0; pos < this.grid.length; pos++) {
            if (this.grid[pos].color || this.grid[pos].solid) {
                this.__changeCell(pos, emptyTile);
            }
        }
        this._spawnNewPiece();
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveLeft() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveLeft();
        if (this._collidesLeft()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveRight() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveRight();
        if (this._collidesRight()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    rotate() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.rotate();
        while (this._collidesRight()) {
            this._piece.moveLeft();
            if (this._collidesLeft()) {
                this._piece.revert();
                break;
            }
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveDown() {
        this._update();
    }
    /**
     * @return {?}
     */
    _clearFullLines() {
        for (let row = this._gridSize.height - 1; row >= 0; row--) {
            /** @type {?} */
            let isFull = true;
            for (let col = 0; col < this._gridSize.width; col++) {
                /** @type {?} */
                const pos = row * this._gridSize.width + col;
                if (this.grid[pos].solid === false) {
                    isFull = false;
                    break;
                }
            }
            if (isFull) {
                /** @type {?} */
                const emptyRow = Array.apply(null, Array(this._gridSize.width))
                    .map((idx) => new Tile());
                /** @type {?} */
                const topPortion = this.grid.slice(0, row * this._gridSize.width);
                this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));
                this._lineCleared.next();
            }
        }
    }
    /**
     * @return {?}
     */
    _update() {
        if (this._locked) {
            return;
        }
        this._locked = true;
        this._piece.revert();
        this._clearPiece();
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            this._piece.revert();
            this._markSolid();
            this._drawPiece();
            this._clearFullLines();
            this._spawnNewPiece();
            if (this._isGameOver()) {
                this._onGameOver();
                return;
            }
        }
        this._drawPiece();
        this._locked = false;
    }
    /**
     * @return {?}
     */
    _isGameOver() {
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            return true;
        }
        this._piece.revert();
        return false;
    }
    /**
     * @return {?}
     */
    _onGameOver() {
        this.stop();
        this._gameOver.next();
    }
    /**
     * @return {?}
     */
    _spawnNewPiece() {
        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);
    }
    /**
     * @return {?}
     */
    _initializeEmptyBoard() {
        /** @type {?} */
        const cellsCount = this._gridSize.width * this._gridSize.height;
        this.grid = Array.apply(null, Array(cellsCount))
            .map((idx) => new Tile());
    }
    /**
     * @return {?}
     */
    _clearPiece() {
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: undefined });
        });
    }
    /**
     * @return {?}
     */
    _drawPiece() {
        this._piece.clearStore();
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: this._piece.color });
        });
    }
    /**
     * @return {?}
     */
    _markSolid() {
        this._piece.positionsOnGrid.forEach((pos) => {
            this.__changeCell(pos, { solid: true });
        });
    }
    /**
     * @param {?} pos
     * @param {?=} data
     * @return {?}
     */
    __changeCell(pos, data = {}) {
        this.grid[pos] = Object.assign({}, this.grid[pos], data);
    }
    /**
     * @return {?}
     */
    _collidesBottom() {
        if (this._piece.bottomRow >= this._gridSize.height) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    _collidesLeft() {
        if (this._piece.leftCol < 0) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    _collidesRight() {
        if (this._piece.rightCol >= this._gridSize.width) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    __collides() {
        return this._piece.positionsOnGrid
            .some((pos) => {
            if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {
                return true;
            }
            return false;
        });
    }
}
GameManagerService.ɵfac = function GameManagerService_Factory(t) { return new (t || GameManagerService)(); };
GameManagerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GameManagerService, factory: GameManagerService.ɵfac });
/** @nocollapse */
GameManagerService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GameManagerService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const GAME_SPEED = 500;
/** @type {?} */
const MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed
/** @enum {number} */
const GameState = {
    Paused: 0,
    Started: 1,
    Over: 2,
};
GameState[GameState.Paused] = 'Paused';
GameState[GameState.Started] = 'Started';
GameState[GameState.Over] = 'Over';
class TetrisCoreComponent {
    /**
     * @param {?} _manager
     */
    constructor(_manager) {
        this._manager = _manager;
        this.rotate = false;
        this.moveLeft = false;
        this.moveRight = false;
        this.moveDown = false;
        this.start = false;
        this.stop = false;
        this.reset = false;
        this.lineCleared = new EventEmitter();
        this.gameOver = new EventEmitter();
        this.state = GameState.Paused;
        this.gridWidth = 10;
        this.gridHeight = 20;
        this._manager.lineCleared$.subscribe((data) => this._onLineCleared(data));
        this._manager.gameOver$.subscribe((data) => this._onGameOver(data));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initialSpeed = this.initialSpeed || GAME_SPEED;
        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;
        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);
        this.grid = this._manager.grid;
        setInterval(() => {
            if (this.moveDown) {
                this._manager.moveDown();
            }
        }, this._moveDownSpeed);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this._keyPressed(changes.moveLeft)) {
            this._manager.moveLeft();
        }
        else if (this._keyPressed(changes.moveRight)) {
            this._manager.moveRight();
        }
        if (this._keyPressed(changes.rotate)) {
            this._manager.rotate();
        }
        if (this._keyPressed(changes.start)) {
            this._manager.start();
        }
        if (this._keyPressed(changes.stop)) {
            this._manager.stop();
        }
        if (this._keyPressed(changes.reset)) {
            this._manager.reset();
        }
    }
    /**
     * @return {?}
     */
    actionLeft() { this._manager.moveLeft(); }
    /**
     * @return {?}
     */
    actionRight() { this._manager.moveRight(); }
    /**
     * @return {?}
     */
    actionRotate() { this._manager.rotate(); }
    /**
     * @return {?}
     */
    actionDown() { this._manager.moveDown(); }
    /**
     * @return {?}
     */
    actionReset() { this._manager.reset(); }
    /**
     * @return {?}
     */
    actionStart() {
        this._manager.start();
        this.state = GameState.Started;
    }
    /**
     * @return {?}
     */
    actionStop() {
        this._manager.stop();
        this.state = GameState.Paused;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    _keyPressed(key) {
        return key && key.currentValue && !key.previousValue;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _onLineCleared(data) {
        this.lineCleared.emit(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _onGameOver(data) {
        this.state = GameState.Over;
        this.gameOver.emit();
    }
}
TetrisCoreComponent.ɵfac = function TetrisCoreComponent_Factory(t) { return new (t || TetrisCoreComponent)(ɵngcc0.ɵɵdirectiveInject(GameManagerService)); };
TetrisCoreComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TetrisCoreComponent, selectors: [["tetris-core"]], inputs: { rotate: "rotate", moveLeft: "moveLeft", moveRight: "moveRight", moveDown: "moveDown", start: "start", stop: "stop", reset: "reset", initialSpeed: "initialSpeed", tileSize: "tileSize" }, outputs: { lineCleared: "lineCleared", gameOver: "gameOver" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "grid"]], template: function TetrisCoreComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "board", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("grid", ctx.grid);
    } }, directives: function () { return [BoardComponent]; }, encapsulation: 2 });
/** @nocollapse */
TetrisCoreComponent.ctorParameters = () => [
    { type: GameManagerService }
];
TetrisCoreComponent.propDecorators = {
    tileSize: [{ type: Input }],
    initialSpeed: [{ type: Input }],
    rotate: [{ type: Input }],
    moveLeft: [{ type: Input }],
    moveRight: [{ type: Input }],
    moveDown: [{ type: Input }],
    start: [{ type: Input }],
    stop: [{ type: Input }],
    reset: [{ type: Input }],
    lineCleared: [{ type: Output }],
    gameOver: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TetrisCoreComponent, [{
        type: Component,
        args: [{
                selector: 'tetris-core',
                template: "<board\n    [grid]=\"grid\"></board>\n"
            }]
    }], function () { return [{ type: GameManagerService }]; }, { rotate: [{
            type: Input
        }], moveLeft: [{
            type: Input
        }], moveRight: [{
            type: Input
        }], moveDown: [{
            type: Input
        }], start: [{
            type: Input
        }], stop: [{
            type: Input
        }], reset: [{
            type: Input
        }], lineCleared: [{
            type: Output
        }], gameOver: [{
            type: Output
        }], initialSpeed: [{
            type: Input
        }], tileSize: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class TileComponent {
    /**
     * @param {?} el
     * @param {?} _renderer
     * @param {?} _manager
     */
    constructor(el, _renderer, _manager) {
        this.el = el;
        this._renderer = _renderer;
        this._manager = _manager;
        this.tileSize = null;
        if (this._manager.settings.tileSize) {
            this.tileSize = this._manager.settings.tileSize;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data.color) {
            this._renderer.addClass(this.el.nativeElement, this.data.color);
        }
    }
}
TileComponent.ɵfac = function TileComponent_Factory(t) { return new (t || TileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(GameManagerService)); };
TileComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TileComponent, selectors: [["tile"]], hostVars: 4, hostBindings: function TileComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.tileSize)("height", ctx.tileSize);
    } }, inputs: { data: "data" }, decls: 0, vars: 0, template: function TileComponent_Template(rf, ctx) { }, styles: ["tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#fca}tile.color-dot{background:#ff77a8}tile.color-line{background:#83769c}tile.color-t{background:#29adff}tile.color-l{background:#00e436}tile.color-lr{background:#ffec27}tile.color-z{background:#ffa300}tile.color-s{background:#c2c3c7}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
TileComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: GameManagerService }
];
TileComponent.propDecorators = {
    data: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TileComponent, [{
        type: Component,
        args: [{
                selector: 'tile',
                template: "",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line
                host: {
                    '[style.width]': 'tileSize',
                    '[style.height]': 'tileSize'
                },
                styles: ["tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#fca}tile.color-dot{background:#ff77a8}tile.color-line{background:#83769c}tile.color-t{background:#29adff}tile.color-l{background:#00e436}tile.color-lr{background:#ffec27}tile.color-z{background:#ffa300}tile.color-s{background:#c2c3c7}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: GameManagerService }]; }, { data: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BoardComponent {
    /**
     * @param {?} _manager
     */
    constructor(_manager) {
        this._manager = _manager;
        this.boardWidth = null;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._manager.settings.tileSize) {
            /** @type {?} */
            const bb = this.tile.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            const TILE_MARGIN = 1;
            /** @type {?} */
            const oneTileSpace = bb.width + 2 * TILE_MARGIN;
            this.boardWidth = oneTileSpace * this._manager.elementsInRow;
        }
    }
}
BoardComponent.ɵfac = function BoardComponent_Factory(t) { return new (t || BoardComponent)(ɵngcc0.ɵɵdirectiveInject(GameManagerService)); };
BoardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BoardComponent, selectors: [["board"]], viewQuery: function BoardComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TileComponent, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tile = _t.first);
    } }, hostVars: 2, hostBindings: function BoardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.boardWidth + "px");
    } }, inputs: { grid: "grid" }, decls: 1, vars: 1, consts: [[3, "data", 4, "ngFor", "ngForOf"], [3, "data"]], template: function BoardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BoardComponent_tile_0_Template, 1, 1, "tile", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.grid);
    } }, directives: [ɵngcc1.NgForOf, TileComponent], styles: ["[_nghost-%COMP%]{width:290px;display:block}"] });
/** @nocollapse */
BoardComponent.ctorParameters = () => [
    { type: GameManagerService }
];
BoardComponent.propDecorators = {
    grid: [{ type: Input }],
    tile: [{ type: ViewChild, args: [TileComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BoardComponent, [{
        type: Component,
        args: [{
                selector: 'board',
                template: "<tile *ngFor=\"let tileData of grid\"\n    [data]=\"tileData\">\n</tile>\n",
                host: {
                    '[style.width]': 'boardWidth + "px"'
                },
                styles: [":host{width:290px;display:block}"]
            }]
    }], function () { return [{ type: GameManagerService }]; }, { grid: [{
            type: Input
        }], tile: [{
            type: ViewChild,
            args: [TileComponent]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class TetrisCoreModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: TetrisCoreModule
        };
    }
}
TetrisCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TetrisCoreModule });
TetrisCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TetrisCoreModule_Factory(t) { return new (t || TetrisCoreModule)(); }, providers: [
        GameManagerService
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TetrisCoreModule, { declarations: function () { return [TetrisCoreComponent, BoardComponent, TileComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TetrisCoreComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TetrisCoreModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    TetrisCoreComponent,
                    BoardComponent,
                    TileComponent
                ],
                providers: [
                    GameManagerService
                ],
                exports: [TetrisCoreComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { TetrisCoreModule, GameState, TetrisCoreComponent, BoardComponent as ɵb, GameManagerService as ɵa, TileComponent as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,