(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/internal/Subject'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-tetris', ['exports', '@angular/core', 'rxjs/internal/Subject', '@angular/common'], factory) :
    (factory((global['ngx-tetris'] = {}),global.ng.core,global.rxjs['internal/Subject'],global.ng.common));
}(this, (function (exports,core,Subject,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var PieceRotation = {
        DEG_0: 0,
        DEG_90: 1,
        DEG_180: 2,
        DEG_270: 3,
    };
    PieceRotation[PieceRotation.DEG_0] = 'DEG_0';
    PieceRotation[PieceRotation.DEG_90] = 'DEG_90';
    PieceRotation[PieceRotation.DEG_180] = 'DEG_180';
    PieceRotation[PieceRotation.DEG_270] = 'DEG_270';
    /** @enum {number} */
    var PieceTypes = {
        Dot: 1,
        Box: 2,
        Line: 3,
        T: 4,
        L: 5,
        Lr: 6,
        Z: 7,
        S: 8,
    };
    PieceTypes[PieceTypes.Dot] = 'Dot';
    PieceTypes[PieceTypes.Box] = 'Box';
    PieceTypes[PieceTypes.Line] = 'Line';
    PieceTypes[PieceTypes.T] = 'T';
    PieceTypes[PieceTypes.L] = 'L';
    PieceTypes[PieceTypes.Lr] = 'Lr';
    PieceTypes[PieceTypes.Z] = 'Z';
    PieceTypes[PieceTypes.S] = 'S';
    /** @enum {string} */
    var PieceColors = {
        Box: 'color-box',
        Dot: 'color-dot',
        Line: 'color-line',
        T: 'color-t',
        L: 'color-l',
        Lr: 'color-lr',
        Z: 'color-z',
        S: 'color-s',
    };
    var Piece = (function () {
        function Piece(x, y, gridSize, maps) {
            this.color = 'red';
            this.rotation = PieceRotation.DEG_0;
            this.map = [
                [], []
            ];
            this._lastConfig = null;
            this._gridSize = gridSize;
            this.x = x;
            this.y = y;
            this._maps = maps;
            this.map = this._maps[this.rotation];
        }
        Object.defineProperty(Piece.prototype, "positionsOnGrid", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var acc = [];
                for (var row = 0; row < 4; row++) {
                    for (var col = 0; col < 4; col++) {
                        if (this.map[row][col]) {
                            /** @type {?} */
                            var pos = (this.y + row) * this._gridSize.width + this.x + col;
                            if (pos > 0) {
                                acc.push(pos);
                            }
                        }
                    }
                }
                return acc;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Piece.prototype.store = /**
         * @return {?}
         */
            function () {
                this._lastConfig = {
                    x: this.x,
                    y: this.y,
                    rotation: this.rotation,
                    map: this.map
                };
            };
        /**
         * @return {?}
         */
        Piece.prototype.clearStore = /**
         * @return {?}
         */
            function () {
                this._lastConfig = null;
            };
        /**
         * @return {?}
         */
        Piece.prototype.revert = /**
         * @return {?}
         */
            function () {
                if (this._lastConfig) {
                    for (var x in this._lastConfig) {
                        if (this._lastConfig.hasOwnProperty(x)) {
                            this[x] = this._lastConfig[x];
                        }
                    }
                    this._lastConfig = null;
                }
            };
        /**
         * @return {?}
         */
        Piece.prototype.rotate = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var keys = Object.keys(this._maps);
                /** @type {?} */
                var idx = keys.indexOf(this.rotation.toString());
                if (idx >= keys.length - 1) {
                    this.rotation = /** @type {?} */ (keys[0]);
                }
                else {
                    this.rotation = /** @type {?} */ (keys[++idx]);
                }
                this.map = this._maps[this.rotation];
            };
        /**
         * @return {?}
         */
        Piece.prototype.moveDown = /**
         * @return {?}
         */
            function () {
                this.y++;
            };
        /**
         * @return {?}
         */
        Piece.prototype.moveRight = /**
         * @return {?}
         */
            function () {
                this.x++;
            };
        /**
         * @return {?}
         */
        Piece.prototype.moveLeft = /**
         * @return {?}
         */
            function () {
                this.x--;
            };
        Object.defineProperty(Piece.prototype, "bottomRow", {
            get: /**
             * @return {?}
             */ function () {
                return this.y + 3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Piece.prototype, "rightCol", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var col = 3;
                while (col >= 0) {
                    for (var row = 0; row <= 3; row++) {
                        if (this.map[row][col]) {
                            return this.x + col;
                        }
                    }
                    col--;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Piece.prototype, "leftCol", {
            get: /**
             * @return {?}
             */ function () {
                return this.x;
            },
            enumerable: true,
            configurable: true
        });
        return Piece;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS = [];
    MAPS[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Box, undefined, undefined, undefined],
    ];
    var Dot = (function (_super) {
        __extends(Dot, _super);
        function Dot(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS) || this;
            _this.color = PieceColors['Dot'];
            return _this;
        }
        return Dot;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$1 = [];
    MAPS$1[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Box, PieceTypes.Box, undefined, undefined],
        [PieceTypes.Box, PieceTypes.Box, undefined, undefined],
    ];
    var Box = (function (_super) {
        __extends(Box, _super);
        function Box(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$1) || this;
            _this.color = PieceColors['Box'];
            return _this;
        }
        return Box;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$2 = [];
    MAPS$2[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line],
    ];
    MAPS$2[PieceRotation.DEG_90] = [
        [PieceTypes.Line, undefined, undefined, undefined],
        [PieceTypes.Line, undefined, undefined, undefined],
        [PieceTypes.Line, undefined, undefined, undefined],
        [PieceTypes.Line, undefined, undefined, undefined],
    ];
    var Line = (function (_super) {
        __extends(Line, _super);
        function Line(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$2) || this;
            _this.color = PieceColors['Line'];
            return _this;
        }
        return Line;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$3 = {};
    MAPS$3[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, PieceTypes.T, undefined, undefined],
        [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],
    ];
    MAPS$3[PieceRotation.DEG_90] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.T, undefined, undefined, undefined],
        [PieceTypes.T, PieceTypes.T, undefined, undefined],
        [PieceTypes.T, undefined, undefined, undefined],
    ];
    MAPS$3[PieceRotation.DEG_180] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined],
        [undefined, PieceTypes.T, undefined, undefined],
    ];
    MAPS$3[PieceRotation.DEG_270] = [
        [undefined, undefined, undefined, undefined],
        [undefined, PieceTypes.T, undefined, undefined],
        [PieceTypes.T, PieceTypes.T, undefined, undefined],
        [undefined, PieceTypes.T, undefined, undefined],
    ];
    var T = (function (_super) {
        __extends(T, _super);
        function T(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$3) || this;
            _this.color = PieceColors['T'];
            return _this;
        }
        return T;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$4 = {};
    MAPS$4[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [undefined, PieceTypes.Z, undefined, undefined],
        [PieceTypes.Z, PieceTypes.Z, undefined, undefined],
        [PieceTypes.Z, undefined, undefined, undefined],
    ];
    MAPS$4[PieceRotation.DEG_90] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Z, PieceTypes.Z, undefined, undefined],
        [undefined, PieceTypes.Z, PieceTypes.Z, undefined],
    ];
    var Z = (function (_super) {
        __extends(Z, _super);
        function Z(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$4) || this;
            _this.color = PieceColors['Z'];
            return _this;
        }
        return Z;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$5 = {};
    MAPS$5[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.S, undefined, undefined, undefined],
        [PieceTypes.S, PieceTypes.S, undefined, undefined],
        [undefined, PieceTypes.S, undefined, undefined],
    ];
    MAPS$5[PieceRotation.DEG_90] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, PieceTypes.S, PieceTypes.S, undefined],
        [PieceTypes.S, PieceTypes.S, undefined, undefined],
    ];
    var S = (function (_super) {
        __extends(S, _super);
        function S(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$5) || this;
            _this.color = PieceColors['S'];
            return _this;
        }
        return S;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$6 = {};
    MAPS$6[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.L, undefined, undefined, undefined],
        [PieceTypes.L, undefined, undefined, undefined],
        [PieceTypes.L, PieceTypes.L, undefined, undefined],
    ];
    MAPS$6[PieceRotation.DEG_90] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],
        [PieceTypes.L, undefined, undefined, undefined],
    ];
    MAPS$6[PieceRotation.DEG_180] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.L, PieceTypes.L, undefined, undefined],
        [undefined, PieceTypes.L, undefined, undefined],
        [undefined, PieceTypes.L, undefined, undefined],
    ];
    MAPS$6[PieceRotation.DEG_270] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, PieceTypes.L, undefined],
        [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined],
    ];
    var L = (function (_super) {
        __extends(L, _super);
        function L(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$6) || this;
            _this.color = PieceColors['L'];
            return _this;
        }
        return L;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPS$7 = {};
    MAPS$7[PieceRotation.DEG_0] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],
        [undefined, PieceTypes.Lr, undefined, undefined],
        [undefined, PieceTypes.Lr, undefined, undefined],
    ];
    MAPS$7[PieceRotation.DEG_90] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, PieceTypes.Lr, undefined],
        [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],
    ];
    MAPS$7[PieceRotation.DEG_180] = [
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Lr, undefined, undefined, undefined],
        [PieceTypes.Lr, undefined, undefined, undefined],
        [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined],
    ];
    MAPS$7[PieceRotation.DEG_270] = [
        [undefined, undefined, undefined, undefined],
        [undefined, undefined, undefined, undefined],
        [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined],
        [PieceTypes.Lr, undefined, undefined, undefined],
    ];
    var Lr = (function (_super) {
        __extends(Lr, _super);
        function Lr(x, y, gridSize) {
            var _this = _super.call(this, x, y, gridSize, MAPS$7) || this;
            _this.color = PieceColors['Lr'];
            return _this;
        }
        return Lr;
    }(Piece));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PiecesFactory = (function () {
        function PiecesFactory(gridSize) {
            this._available = [];
            this._gridSize = gridSize;
            this._available.push(Dot);
            this._available.push(Box);
            this._available.push(Line);
            this._available.push(T);
            this._available.push(Z);
            this._available.push(S);
            this._available.push(L);
            this._available.push(Lr);
        }
        /**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        PiecesFactory.prototype.getRandomPiecePiece = /**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
            function (x, y) {
                /** @type {?} */
                var idx = Math.floor(Math.random() * (this._available.length));
                return new this._available[idx](x, y, this._gridSize);
                // return new this._available[2](x, y, this._gridSize);
            };
        return PiecesFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SPAWN_POSITION_X = 4;
    /** @type {?} */
    var SPAWN_POSITION_Y = -4;
    var Tile = (function () {
        function Tile() {
            this.solid = false;
            this.color = null;
        }
        return Tile;
    }());
    var GameManagerService = (function () {
        function GameManagerService() {
            this.settings = {
                tileSize: null
            };
            this._gridSize = { width: 0, height: 0 };
            this._locked = true;
            this._lineCleared = new Subject.Subject();
            this._gameOver = new Subject.Subject();
            this.lineCleared$ = this._lineCleared.asObservable();
            this.gameOver$ = this._gameOver.asObservable();
        }
        Object.defineProperty(GameManagerService.prototype, "elementsInRow", {
            get: /**
             * @return {?}
             */ function () {
                return this._gridSize.width;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} width
         * @param {?} height
         * @param {?} gameSpeed
         * @param {?=} tileSize
         * @return {?}
         */
        GameManagerService.prototype.initialize = /**
         * @param {?} width
         * @param {?} height
         * @param {?} gameSpeed
         * @param {?=} tileSize
         * @return {?}
         */
            function (width, height, gameSpeed, tileSize) {
                this._gridSize.width = width;
                this._gridSize.height = height;
                this._gameSpeed = gameSpeed;
                this._piecesFactory = new PiecesFactory(this._gridSize);
                if (tileSize) {
                    this.settings.tileSize = tileSize;
                }
                this._initializeEmptyBoard();
                this._spawnNewPiece();
                this._drawPiece();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.start = /**
         * @return {?}
         */
            function () {
                var _this = this;
                clearInterval(this._gameInterval);
                this._gameInterval = setInterval(function () {
                    _this._update();
                }, this._gameSpeed);
                this._locked = false;
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.stop = /**
         * @return {?}
         */
            function () {
                this._locked = true;
                clearInterval(this._gameInterval);
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.reset = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var emptyTile = new Tile();
                for (var pos = 0; pos < this.grid.length; pos++) {
                    if (this.grid[pos].color || this.grid[pos].solid) {
                        this.__changeCell(pos, emptyTile);
                    }
                }
                this._spawnNewPiece();
                this._drawPiece();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.moveLeft = /**
         * @return {?}
         */
            function () {
                if (this._locked) {
                    return;
                }
                this._clearPiece();
                this._piece.store();
                this._piece.moveLeft();
                if (this._collidesLeft()) {
                    this._piece.revert();
                }
                this._drawPiece();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.moveRight = /**
         * @return {?}
         */
            function () {
                if (this._locked) {
                    return;
                }
                this._clearPiece();
                this._piece.store();
                this._piece.moveRight();
                if (this._collidesRight()) {
                    this._piece.revert();
                }
                this._drawPiece();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.rotate = /**
         * @return {?}
         */
            function () {
                if (this._locked) {
                    return;
                }
                this._clearPiece();
                this._piece.store();
                this._piece.rotate();
                while (this._collidesRight()) {
                    this._piece.moveLeft();
                    if (this._collidesLeft()) {
                        this._piece.revert();
                        break;
                    }
                }
                this._drawPiece();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.moveDown = /**
         * @return {?}
         */
            function () {
                this._update();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._clearFullLines = /**
         * @return {?}
         */
            function () {
                for (var row = this._gridSize.height - 1; row >= 0; row--) {
                    /** @type {?} */
                    var isFull = true;
                    for (var col = 0; col < this._gridSize.width; col++) {
                        /** @type {?} */
                        var pos = row * this._gridSize.width + col;
                        if (this.grid[pos].solid === false) {
                            isFull = false;
                            break;
                        }
                    }
                    if (isFull) {
                        /** @type {?} */
                        var emptyRow = Array.apply(null, Array(this._gridSize.width))
                            .map(function (idx) { return new Tile(); });
                        /** @type {?} */
                        var topPortion = this.grid.slice(0, row * this._gridSize.width);
                        (_a = this.grid).splice.apply(_a, __spread([0, ++row * this._gridSize.width], emptyRow.concat(topPortion)));
                        this._lineCleared.next();
                    }
                }
                var _a;
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._update = /**
         * @return {?}
         */
            function () {
                if (this._locked) {
                    return;
                }
                this._locked = true;
                this._piece.revert();
                this._clearPiece();
                this._piece.store();
                this._piece.moveDown();
                if (this._collidesBottom()) {
                    this._piece.revert();
                    this._markSolid();
                    this._drawPiece();
                    this._clearFullLines();
                    this._spawnNewPiece();
                    if (this._isGameOver()) {
                        this._onGameOver();
                        return;
                    }
                }
                this._drawPiece();
                this._locked = false;
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._isGameOver = /**
         * @return {?}
         */
            function () {
                this._piece.store();
                this._piece.moveDown();
                if (this._collidesBottom()) {
                    return true;
                }
                this._piece.revert();
                return false;
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._onGameOver = /**
         * @return {?}
         */
            function () {
                this.stop();
                this._gameOver.next();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._spawnNewPiece = /**
         * @return {?}
         */
            function () {
                this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._initializeEmptyBoard = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var cellsCount = this._gridSize.width * this._gridSize.height;
                this.grid = Array.apply(null, Array(cellsCount))
                    .map(function (idx) { return new Tile(); });
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._clearPiece = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._piece.positionsOnGrid
                    .forEach(function (pos) {
                    _this.__changeCell(pos, { color: undefined });
                });
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._drawPiece = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._piece.clearStore();
                this._piece.positionsOnGrid
                    .forEach(function (pos) {
                    _this.__changeCell(pos, { color: _this._piece.color });
                });
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._markSolid = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._piece.positionsOnGrid.forEach(function (pos) {
                    _this.__changeCell(pos, { solid: true });
                });
            };
        /**
         * @param {?} pos
         * @param {?=} data
         * @return {?}
         */
        GameManagerService.prototype.__changeCell = /**
         * @param {?} pos
         * @param {?=} data
         * @return {?}
         */
            function (pos, data) {
                if (data === void 0) {
                    data = {};
                }
                this.grid[pos] = Object.assign({}, this.grid[pos], data);
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._collidesBottom = /**
         * @return {?}
         */
            function () {
                if (this._piece.bottomRow >= this._gridSize.height) {
                    return true;
                }
                return this.__collides();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._collidesLeft = /**
         * @return {?}
         */
            function () {
                if (this._piece.leftCol < 0) {
                    return true;
                }
                return this.__collides();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype._collidesRight = /**
         * @return {?}
         */
            function () {
                if (this._piece.rightCol >= this._gridSize.width) {
                    return true;
                }
                return this.__collides();
            };
        /**
         * @return {?}
         */
        GameManagerService.prototype.__collides = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this._piece.positionsOnGrid
                    .some(function (pos) {
                    if (pos > 0 && _this.grid[pos] && _this.grid[pos].solid) {
                        return true;
                    }
                    return false;
                });
            };
        GameManagerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GameManagerService.ctorParameters = function () { return []; };
        return GameManagerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GAME_SPEED = 500;
    /** @type {?} */
    var MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed
    /** @enum {number} */
    var GameState = {
        Paused: 0,
        Started: 1,
        Over: 2,
    };
    GameState[GameState.Paused] = 'Paused';
    GameState[GameState.Started] = 'Started';
    GameState[GameState.Over] = 'Over';
    var TetrisCoreComponent = (function () {
        function TetrisCoreComponent(_manager) {
            var _this = this;
            this._manager = _manager;
            this.rotate = false;
            this.moveLeft = false;
            this.moveRight = false;
            this.moveDown = false;
            this.start = false;
            this.stop = false;
            this.reset = false;
            this.lineCleared = new core.EventEmitter();
            this.gameOver = new core.EventEmitter();
            this.state = GameState.Paused;
            this.gridWidth = 10;
            this.gridHeight = 20;
            this._manager.lineCleared$.subscribe(function (data) { return _this._onLineCleared(data); });
            this._manager.gameOver$.subscribe(function (data) { return _this._onGameOver(data); });
        }
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initialSpeed = this.initialSpeed || GAME_SPEED;
                this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;
                this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);
                this.grid = this._manager.grid;
                setInterval(function () {
                    if (_this.moveDown) {
                        _this._manager.moveDown();
                    }
                }, this._moveDownSpeed);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TetrisCoreComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this._keyPressed(changes.moveLeft)) {
                    this._manager.moveLeft();
                }
                else if (this._keyPressed(changes.moveRight)) {
                    this._manager.moveRight();
                }
                if (this._keyPressed(changes.rotate)) {
                    this._manager.rotate();
                }
                if (this._keyPressed(changes.start)) {
                    this._manager.start();
                }
                if (this._keyPressed(changes.stop)) {
                    this._manager.stop();
                }
                if (this._keyPressed(changes.reset)) {
                    this._manager.reset();
                }
            };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionLeft = /**
         * @return {?}
         */
            function () { this._manager.moveLeft(); };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionRight = /**
         * @return {?}
         */
            function () { this._manager.moveRight(); };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionRotate = /**
         * @return {?}
         */
            function () { this._manager.rotate(); };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionDown = /**
         * @return {?}
         */
            function () { this._manager.moveDown(); };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionReset = /**
         * @return {?}
         */
            function () { this._manager.reset(); };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionStart = /**
         * @return {?}
         */
            function () {
                this._manager.start();
                this.state = GameState.Started;
            };
        /**
         * @return {?}
         */
        TetrisCoreComponent.prototype.actionStop = /**
         * @return {?}
         */
            function () {
                this._manager.stop();
                this.state = GameState.Paused;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        TetrisCoreComponent.prototype._keyPressed = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return key && key.currentValue && !key.previousValue;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        TetrisCoreComponent.prototype._onLineCleared = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.lineCleared.emit(data);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        TetrisCoreComponent.prototype._onGameOver = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.state = GameState.Over;
                this.gameOver.emit();
            };
        TetrisCoreComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tetris-core',
                        template: "<board\n    [grid]=\"grid\"></board>\n"
                    }] }
        ];
        /** @nocollapse */
        TetrisCoreComponent.ctorParameters = function () {
            return [
                { type: GameManagerService }
            ];
        };
        TetrisCoreComponent.propDecorators = {
            tileSize: [{ type: core.Input }],
            initialSpeed: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            moveLeft: [{ type: core.Input }],
            moveRight: [{ type: core.Input }],
            moveDown: [{ type: core.Input }],
            start: [{ type: core.Input }],
            stop: [{ type: core.Input }],
            reset: [{ type: core.Input }],
            lineCleared: [{ type: core.Output }],
            gameOver: [{ type: core.Output }]
        };
        return TetrisCoreComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TileComponent = (function () {
        function TileComponent(el, _renderer, _manager) {
            this.el = el;
            this._renderer = _renderer;
            this._manager = _manager;
            this.tileSize = null;
            if (this._manager.settings.tileSize) {
                this.tileSize = this._manager.settings.tileSize;
            }
        }
        /**
         * @return {?}
         */
        TileComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.data.color) {
                    this._renderer.addClass(this.el.nativeElement, this.data.color);
                }
            };
        TileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tile',
                        template: "",
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        // tslint:disable-next-line
                        host: {
                            '[style.width]': 'tileSize',
                            '[style.height]': 'tileSize'
                        },
                        styles: ["tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#fca}tile.color-dot{background:#ff77a8}tile.color-line{background:#83769c}tile.color-t{background:#29adff}tile.color-l{background:#00e436}tile.color-lr{background:#ffec27}tile.color-z{background:#ffa300}tile.color-s{background:#c2c3c7}"]
                    }] }
        ];
        /** @nocollapse */
        TileComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: GameManagerService }
            ];
        };
        TileComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return TileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BoardComponent = (function () {
        function BoardComponent(_manager) {
            this._manager = _manager;
            this.boardWidth = null;
        }
        /**
         * @return {?}
         */
        BoardComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this._manager.settings.tileSize) {
                    /** @type {?} */
                    var bb = this.tile.el.nativeElement.getBoundingClientRect();
                    /** @type {?} */
                    var TILE_MARGIN = 1;
                    /** @type {?} */
                    var oneTileSpace = bb.width + 2 * TILE_MARGIN;
                    this.boardWidth = oneTileSpace * this._manager.elementsInRow;
                }
            };
        BoardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'board',
                        template: "<tile *ngFor=\"let tileData of grid\"\n    [data]=\"tileData\">\n</tile>\n",
                        host: {
                            '[style.width]': 'boardWidth + "px"',
                        },
                        styles: [":host{width:290px;display:block}"]
                    }] }
        ];
        /** @nocollapse */
        BoardComponent.ctorParameters = function () {
            return [
                { type: GameManagerService }
            ];
        };
        BoardComponent.propDecorators = {
            grid: [{ type: core.Input }],
            tile: [{ type: core.ViewChild, args: [TileComponent,] }]
        };
        return BoardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TetrisCoreModule = (function () {
        function TetrisCoreModule() {
        }
        /**
         * @return {?}
         */
        TetrisCoreModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: TetrisCoreModule
                };
            };
        TetrisCoreModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            TetrisCoreComponent,
                            BoardComponent,
                            TileComponent
                        ],
                        providers: [
                            GameManagerService
                        ],
                        exports: [TetrisCoreComponent]
                    },] }
        ];
        return TetrisCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.TetrisCoreModule = TetrisCoreModule;
    exports.GameState = GameState;
    exports.TetrisCoreComponent = TetrisCoreComponent;
    exports.ɵb = BoardComponent;
    exports.ɵa = GameManagerService;
    exports.ɵc = TileComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,