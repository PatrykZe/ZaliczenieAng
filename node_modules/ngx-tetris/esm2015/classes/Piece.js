/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const PieceRotation = {
    DEG_0: 0,
    DEG_90: 1,
    DEG_180: 2,
    DEG_270: 3,
};
export { PieceRotation };
PieceRotation[PieceRotation.DEG_0] = 'DEG_0';
PieceRotation[PieceRotation.DEG_90] = 'DEG_90';
PieceRotation[PieceRotation.DEG_180] = 'DEG_180';
PieceRotation[PieceRotation.DEG_270] = 'DEG_270';
/** @enum {number} */
const PieceTypes = {
    Dot: 1,
    Box: 2,
    Line: 3,
    T: 4,
    L: 5,
    Lr: 6,
    Z: 7,
    S: 8,
};
export { PieceTypes };
PieceTypes[PieceTypes.Dot] = 'Dot';
PieceTypes[PieceTypes.Box] = 'Box';
PieceTypes[PieceTypes.Line] = 'Line';
PieceTypes[PieceTypes.T] = 'T';
PieceTypes[PieceTypes.L] = 'L';
PieceTypes[PieceTypes.Lr] = 'Lr';
PieceTypes[PieceTypes.Z] = 'Z';
PieceTypes[PieceTypes.S] = 'S';
/** @enum {string} */
const PieceColors = {
    Box: 'color-box',
    Dot: 'color-dot',
    Line: 'color-line',
    T: 'color-t',
    L: 'color-l',
    Lr: 'color-lr',
    Z: 'color-z',
    S: 'color-s',
};
export { PieceColors };
export class Piece {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} gridSize
     * @param {?} maps
     */
    constructor(x, y, gridSize, maps) {
        this.color = 'red';
        this.rotation = PieceRotation.DEG_0;
        this.map = [
            [], []
        ];
        this._lastConfig = null;
        this._gridSize = gridSize;
        this.x = x;
        this.y = y;
        this._maps = maps;
        this.map = this._maps[this.rotation];
    }
    /**
     * @return {?}
     */
    get positionsOnGrid() {
        /** @type {?} */
        const acc = [];
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (this.map[row][col]) {
                    /** @type {?} */
                    const pos = (this.y + row) * this._gridSize.width + this.x + col;
                    if (pos > 0) {
                        acc.push(pos);
                    }
                }
            }
        }
        return acc;
    }
    /**
     * @return {?}
     */
    store() {
        this._lastConfig = {
            x: this.x,
            y: this.y,
            rotation: this.rotation,
            map: this.map
        };
    }
    /**
     * @return {?}
     */
    clearStore() {
        this._lastConfig = null;
    }
    /**
     * @return {?}
     */
    revert() {
        if (this._lastConfig) {
            for (const x in this._lastConfig) {
                if (this._lastConfig.hasOwnProperty(x)) {
                    this[x] = this._lastConfig[x];
                }
            }
            this._lastConfig = null;
        }
    }
    /**
     * @return {?}
     */
    rotate() {
        /** @type {?} */
        const keys = Object.keys(this._maps);
        /** @type {?} */
        let idx = keys.indexOf(this.rotation.toString());
        if (idx >= keys.length - 1) {
            this.rotation = /** @type {?} */ (keys[0]);
        }
        else {
            this.rotation = /** @type {?} */ (keys[++idx]);
        }
        this.map = this._maps[this.rotation];
    }
    /**
     * @return {?}
     */
    moveDown() {
        this.y++;
    }
    /**
     * @return {?}
     */
    moveRight() {
        this.x++;
    }
    /**
     * @return {?}
     */
    moveLeft() {
        this.x--;
    }
    /**
     * @return {?}
     */
    get bottomRow() {
        return this.y + 3;
    }
    /**
     * @return {?}
     */
    get rightCol() {
        /** @type {?} */
        let col = 3;
        while (col >= 0) {
            for (let row = 0; row <= 3; row++) {
                if (this.map[row][col]) {
                    return this.x + col;
                }
            }
            col--;
        }
    }
    /**
     * @return {?}
     */
    get leftCol() {
        return this.x;
    }
}
if (false) {
    /** @type {?} */
    Piece.prototype.color;
    /** @type {?} */
    Piece.prototype.x;
    /** @type {?} */
    Piece.prototype.y;
    /** @type {?} */
    Piece.prototype.rotation;
    /** @type {?} */
    Piece.prototype._maps;
    /** @type {?} */
    Piece.prototype.map;
    /** @type {?} */
    Piece.prototype._gridSize;
    /** @type {?} */
    Piece.prototype._lastConfig;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGllY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdGV0cmlzLyIsInNvdXJjZXMiOlsiY2xhc3Nlcy9QaWVjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7SUFDSSxRQUFTO0lBQ1QsU0FBVTtJQUNWLFVBQVc7SUFDWCxVQUFXOzs7NEJBSFgsS0FBSzs0QkFDTCxNQUFNOzRCQUNOLE9BQU87NEJBQ1AsT0FBTzs7O0lBS1AsTUFBTztJQUNQLE1BQU87SUFDUCxPQUFRO0lBQ1IsSUFBSztJQUNMLElBQUs7SUFDTCxLQUFNO0lBQ04sSUFBSztJQUNMLElBQUs7OztzQkFQTCxHQUFHO3NCQUNILEdBQUc7c0JBQ0gsSUFBSTtzQkFDSixDQUFDO3NCQUNELENBQUM7c0JBQ0QsRUFBRTtzQkFDRixDQUFDO3NCQUNELENBQUM7OztJQUtELEtBQU0sV0FBVztJQUNqQixLQUFNLFdBQVc7SUFDakIsTUFBTyxZQUFZO0lBQ25CLEdBQUksU0FBUztJQUNiLEdBQUksU0FBUztJQUNiLElBQUssVUFBVTtJQUNmLEdBQUksU0FBUztJQUNiLEdBQUksU0FBUzs7O0FBR2pCLE1BQU07Ozs7Ozs7SUFjRixZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUk7cUJBYnhCLEtBQUs7d0JBR2EsYUFBYSxDQUFDLEtBQUs7bUJBR1Y7WUFDL0IsRUFBRSxFQUFFLEVBQUU7U0FDVDsyQkFHMEIsSUFBSTtRQUczQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4Qzs7OztJQUVELElBQUksZUFBZTs7UUFDZixNQUFNLEdBQUcs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QUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO2dCQUNoQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2lCQUN2QjthQUNKO1lBQ0QsR0FBRyxFQUFFLENBQUM7U0FDVDtLQUVKOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDakI7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFBpZWNlUm90YXRpb24ge1xuICAgIERFR18wID0gMCxcbiAgICBERUdfOTAgPSAxLFxuICAgIERFR18xODAgPSAyLFxuICAgIERFR18yNzAgPSAzXG59XG5cblxuZXhwb3J0IGVudW0gUGllY2VUeXBlcyB7XG4gICAgRG90ID0gMSxcbiAgICBCb3ggPSAyLFxuICAgIExpbmUgPSAzLFxuICAgIFQgPSA0LFxuICAgIEwgPSA1LFxuICAgIExyID0gNixcbiAgICBaID0gNyxcbiAgICBTID0gOFxufVxuXG4vLyBwaWNrZWQgZnJvbSBodHRwczovL3d3dy5yb21hbnpvbG90YXJldi5jb20vcGljby04LWNvbG9yLXBhbGV0dGUvXG5leHBvcnQgZW51bSBQaWVjZUNvbG9ycyB7XG4gICAgQm94ID0gJ2NvbG9yLWJveCcsXG4gICAgRG90ID0gJ2NvbG9yLWRvdCcsXG4gICAgTGluZSA9ICdjb2xvci1saW5lJyxcbiAgICBUID0gJ2NvbG9yLXQnLFxuICAgIEwgPSAnY29sb3ItbCcsXG4gICAgTHIgPSAnY29sb3ItbHInLFxuICAgIFogPSAnY29sb3IteicsXG4gICAgUyA9ICdjb2xvci1zJ1xufVxuXG5leHBvcnQgY2xhc3MgUGllY2Uge1xuICAgIGNvbG9yID0gJ3JlZCc7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICByb3RhdGlvbjogUGllY2VSb3RhdGlvbiA9IFBpZWNlUm90YXRpb24uREVHXzA7XG5cbiAgICBwcml2YXRlIF9tYXBzOiB7fTtcbiAgICBwdWJsaWMgbWFwOiBBcnJheTxBcnJheTxudW1iZXI+PiA9IFtcbiAgICAgICAgW10sIFtdXG4gICAgXTtcblxuICAgIHByaXZhdGUgX2dyaWRTaXplO1xuICAgIHByaXZhdGUgX2xhc3RDb25maWc6IGFueSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCBncmlkU2l6ZSwgbWFwcykge1xuICAgICAgICB0aGlzLl9ncmlkU2l6ZSA9IGdyaWRTaXplO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLl9tYXBzID0gbWFwcztcblxuICAgICAgICB0aGlzLm1hcCA9IHRoaXMuX21hcHNbdGhpcy5yb3RhdGlvbl07XG4gICAgfVxuXG4gICAgZ2V0IHBvc2l0aW9uc09uR3JpZCgpIHtcbiAgICAgICAgY29uc3QgYWNjID0gW107XG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDQ7IHJvdysrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA0OyBjb2wrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcFtyb3ddW2NvbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zID0gKHRoaXMueSArIHJvdykgKiB0aGlzLl9ncmlkU2l6ZS53aWR0aCArIHRoaXMueCArIGNvbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjYy5wdXNoKHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdG9yZSgpIHtcbiAgICAgICAgdGhpcy5fbGFzdENvbmZpZyA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLFxuICAgICAgICAgICAgbWFwOiB0aGlzLm1hcFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBjbGVhclN0b3JlKCkge1xuICAgICAgICB0aGlzLl9sYXN0Q29uZmlnID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmV2ZXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5fbGFzdENvbmZpZykge1xuICAgICAgICAgICAgZm9yIChjb25zdCB4IGluIHRoaXMuX2xhc3RDb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdENvbmZpZy5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3hdID0gdGhpcy5fbGFzdENvbmZpZ1t4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xhc3RDb25maWcgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJvdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuX21hcHMpO1xuICAgICAgICBsZXQgaWR4ID0ga2V5cy5pbmRleE9mKHRoaXMucm90YXRpb24udG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChpZHggPj0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0ga2V5c1swXSBhcyBhbnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0ga2V5c1srK2lkeF0gYXMgYW55O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXAgPSB0aGlzLl9tYXBzW3RoaXMucm90YXRpb25dO1xuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlRG93bigpIHtcbiAgICAgICAgdGhpcy55Kys7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmVSaWdodCgpIHtcbiAgICAgICAgdGhpcy54Kys7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmVMZWZ0KCkge1xuICAgICAgICB0aGlzLngtLTtcbiAgICB9XG5cbiAgICBnZXQgYm90dG9tUm93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ICsgMztcbiAgICB9XG5cbiAgICBnZXQgcmlnaHRDb2woKSB7XG4gICAgICAgIGxldCBjb2wgPSAzO1xuICAgICAgICB3aGlsZSAoY29sID49IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8PSAzOyByb3crKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcFtyb3ddW2NvbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueCArIGNvbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2wtLTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZ2V0IGxlZnRDb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLng7XG4gICAgfVxufVxuIl19