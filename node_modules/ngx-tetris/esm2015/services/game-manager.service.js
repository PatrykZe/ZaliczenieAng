/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PiecesFactory } from '../classes/PiecesFactory';
import { Subject } from 'rxjs/internal/Subject';
/** @type {?} */
const SPAWN_POSITION_X = 4;
/** @type {?} */
const SPAWN_POSITION_Y = -4;
export class Tile {
    constructor() {
        this.solid = false;
        this.color = null;
    }
}
if (false) {
    /** @type {?} */
    Tile.prototype.solid;
    /** @type {?} */
    Tile.prototype.color;
}
export class GameManagerService {
    constructor() {
        this.settings = {
            tileSize: null
        };
        this._gridSize = { width: 0, height: 0 };
        this._locked = true;
        this._lineCleared = new Subject();
        this._gameOver = new Subject();
        this.lineCleared$ = this._lineCleared.asObservable();
        this.gameOver$ = this._gameOver.asObservable();
    }
    /**
     * @return {?}
     */
    get elementsInRow() {
        return this._gridSize.width;
    }
    /**
     * @param {?} width
     * @param {?} height
     * @param {?} gameSpeed
     * @param {?=} tileSize
     * @return {?}
     */
    initialize(width, height, gameSpeed, tileSize) {
        this._gridSize.width = width;
        this._gridSize.height = height;
        this._gameSpeed = gameSpeed;
        this._piecesFactory = new PiecesFactory(this._gridSize);
        if (tileSize) {
            this.settings.tileSize = tileSize;
        }
        this._initializeEmptyBoard();
        this._spawnNewPiece();
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    start() {
        clearInterval(this._gameInterval);
        this._gameInterval = setInterval(() => {
            this._update();
        }, this._gameSpeed);
        this._locked = false;
    }
    /**
     * @return {?}
     */
    stop() {
        this._locked = true;
        clearInterval(this._gameInterval);
    }
    /**
     * @return {?}
     */
    reset() {
        /** @type {?} */
        const emptyTile = new Tile();
        for (let pos = 0; pos < this.grid.length; pos++) {
            if (this.grid[pos].color || this.grid[pos].solid) {
                this.__changeCell(pos, emptyTile);
            }
        }
        this._spawnNewPiece();
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveLeft() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveLeft();
        if (this._collidesLeft()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveRight() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveRight();
        if (this._collidesRight()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    rotate() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.rotate();
        while (this._collidesRight()) {
            this._piece.moveLeft();
            if (this._collidesLeft()) {
                this._piece.revert();
                break;
            }
        }
        this._drawPiece();
    }
    /**
     * @return {?}
     */
    moveDown() {
        this._update();
    }
    /**
     * @return {?}
     */
    _clearFullLines() {
        for (let row = this._gridSize.height - 1; row >= 0; row--) {
            /** @type {?} */
            let isFull = true;
            for (let col = 0; col < this._gridSize.width; col++) {
                /** @type {?} */
                const pos = row * this._gridSize.width + col;
                if (this.grid[pos].solid === false) {
                    isFull = false;
                    break;
                }
            }
            if (isFull) {
                /** @type {?} */
                const emptyRow = Array.apply(null, Array(this._gridSize.width))
                    .map((idx) => new Tile());
                /** @type {?} */
                const topPortion = this.grid.slice(0, row * this._gridSize.width);
                this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));
                this._lineCleared.next();
            }
        }
    }
    /**
     * @return {?}
     */
    _update() {
        if (this._locked) {
            return;
        }
        this._locked = true;
        this._piece.revert();
        this._clearPiece();
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            this._piece.revert();
            this._markSolid();
            this._drawPiece();
            this._clearFullLines();
            this._spawnNewPiece();
            if (this._isGameOver()) {
                this._onGameOver();
                return;
            }
        }
        this._drawPiece();
        this._locked = false;
    }
    /**
     * @return {?}
     */
    _isGameOver() {
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            return true;
        }
        this._piece.revert();
        return false;
    }
    /**
     * @return {?}
     */
    _onGameOver() {
        this.stop();
        this._gameOver.next();
    }
    /**
     * @return {?}
     */
    _spawnNewPiece() {
        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);
    }
    /**
     * @return {?}
     */
    _initializeEmptyBoard() {
        /** @type {?} */
        const cellsCount = this._gridSize.width * this._gridSize.height;
        this.grid = Array.apply(null, Array(cellsCount))
            .map((idx) => new Tile());
    }
    /**
     * @return {?}
     */
    _clearPiece() {
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: undefined });
        });
    }
    /**
     * @return {?}
     */
    _drawPiece() {
        this._piece.clearStore();
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: this._piece.color });
        });
    }
    /**
     * @return {?}
     */
    _markSolid() {
        this._piece.positionsOnGrid.forEach((pos) => {
            this.__changeCell(pos, { solid: true });
        });
    }
    /**
     * @param {?} pos
     * @param {?=} data
     * @return {?}
     */
    __changeCell(pos, data = {}) {
        this.grid[pos] = Object.assign({}, this.grid[pos], data);
    }
    /**
     * @return {?}
     */
    _collidesBottom() {
        if (this._piece.bottomRow >= this._gridSize.height) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    _collidesLeft() {
        if (this._piece.leftCol < 0) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    _collidesRight() {
        if (this._piece.rightCol >= this._gridSize.width) {
            return true;
        }
        return this.__collides();
    }
    /**
     * @return {?}
     */
    __collides() {
        return this._piece.positionsOnGrid
            .some((pos) => {
            if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {
                return true;
            }
            return false;
        });
    }
}
GameManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GameManagerService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    GameManagerService.prototype.settings;
    /** @type {?} */
    GameManagerService.prototype.grid;
    /** @type {?} */
    GameManagerService.prototype.lineCleared$;
    /** @type {?} */
    GameManagerService.prototype.gameOver$;
    /** @type {?} */
    GameManagerService.prototype._gridSize;
    /** @type {?} */
    GameManagerService.prototype._piece;
    /** @type {?} */
    GameManagerService.prototype._piecesFactory;
    /** @type {?} */
    GameManagerService.prototype._locked;
    /** @type {?} */
    GameManagerService.prototype._gameSpeed;
    /** @type {?} */
    GameManagerService.prototype._gameInterval;
    /** @type {?} */
    GameManagerService.prototype._lineCleared;
    /** @type {?} */
    GameManagerService.prototype._gameOver;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS1tYW5hZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdGV0cmlzLyIsInNvdXJjZXMiOlsic2VydmljZXMvZ2FtZS1tYW5hZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRXZELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7QUFFOUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7O0FBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFNUIsTUFBTTs7cUJBQ00sS0FBSztxQkFDTCxJQUFJOztDQUNmOzs7Ozs7O0FBR0QsTUFBTTtJQThCRjt3QkE3QmtCO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDakI7eUJBZUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7dUJBS1QsSUFBSTs0QkFJQyxJQUFJLE9BQU8sRUFBTzt5QkFDckIsSUFBSSxPQUFPLEVBQU87UUFHbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUNsRDs7OztRQTVCVSxhQUFhO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQzs7Ozs7Ozs7O0lBNkJ6QixVQUFVLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxTQUFTLEVBQUUsUUFBYztRQUN0RSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQy9CLElB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LENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDZjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Ozs7O0lBR3JCLGNBQWM7UUFDbEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDZjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Ozs7O0lBR3JCLFVBQVU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlO2FBQzdCLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ1YsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQzthQUNmO1lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNoQixDQUFDLENBQUM7Ozs7WUExUWQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BpZWNlfSBmcm9tICcuLi9jbGFzc2VzL1BpZWNlJztcbmltcG9ydCB7UGllY2VzRmFjdG9yeX0gZnJvbSAnLi4vY2xhc3Nlcy9QaWVjZXNGYWN0b3J5JztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcy9pbnRlcm5hbC9TdWJqZWN0JztcblxuY29uc3QgU1BBV05fUE9TSVRJT05fWCA9IDQ7XG5jb25zdCBTUEFXTl9QT1NJVElPTl9ZID0gLTQ7XG5cbmV4cG9ydCBjbGFzcyBUaWxlIHtcbiAgICBzb2xpZCA9IGZhbHNlO1xuICAgIGNvbG9yID0gbnVsbDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdhbWVNYW5hZ2VyU2VydmljZSB7XG4gICAgcHVibGljIHNldHRpbmdzID0ge1xuICAgICAgICB0aWxlU2l6ZTogbnVsbFxuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0IGVsZW1lbnRzSW5Sb3coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncmlkU2l6ZS53aWR0aDtcbiAgICB9XG5cbiAgICAvLyBzZXJpYWxpemVkIGdyaWQgOilcbiAgICBwdWJsaWMgZ3JpZDogQXJyYXk8VGlsZT47XG5cbiAgICBwdWJsaWMgbGluZUNsZWFyZWQkOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGdhbWVPdmVyJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gICAgcHJpdmF0ZSBfZ3JpZFNpemU6IHtcbiAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgaGVpZ2h0OiBudW1iZXJcbiAgICB9ID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG5cbiAgICBwcml2YXRlIF9waWVjZTogUGllY2U7XG4gICAgcHJpdmF0ZSBfcGllY2VzRmFjdG9yeTogUGllY2VzRmFjdG9yeTtcblxuICAgIHByaXZhdGUgX2xvY2tlZCA9IHRydWU7XG4gICAgcHJpdmF0ZSBfZ2FtZVNwZWVkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZ2FtZUludGVydmFsO1xuXG4gICAgcHJpdmF0ZSBfbGluZUNsZWFyZWQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgcHJpdmF0ZSBfZ2FtZU92ZXIgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5saW5lQ2xlYXJlZCQgPSB0aGlzLl9saW5lQ2xlYXJlZC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5nYW1lT3ZlciQgPSB0aGlzLl9nYW1lT3Zlci5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZ2FtZVNwZWVkLCB0aWxlU2l6ZT86IGFueSkge1xuICAgICAgICB0aGlzLl9ncmlkU2l6ZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9ncmlkU2l6ZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX2dhbWVTcGVlZCA9IGdhbWVTcGVlZDtcbiAgICAgICAgdGhpcy5fcGllY2VzRmFjdG9yeSA9IG5ldyBQaWVjZXNGYWN0b3J5KHRoaXMuX2dyaWRTaXplKTtcblxuICAgICAgICBpZiAodGlsZVNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudGlsZVNpemUgPSB0aWxlU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVFbXB0eUJvYXJkKCk7XG5cbiAgICAgICAgdGhpcy5fc3Bhd25OZXdQaWVjZSgpO1xuICAgICAgICB0aGlzLl9kcmF3UGllY2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fZ2FtZUludGVydmFsKTtcbiAgICAgICAgdGhpcy5fZ2FtZUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgIH0sIHRoaXMuX2dhbWVTcGVlZCk7XG4gICAgICAgIHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdG9wKCkge1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSB0cnVlO1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2dhbWVJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICBjb25zdCBlbXB0eVRpbGUgPSBuZXcgVGlsZSgpO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCB0aGlzLmdyaWQubGVuZ3RoOyBwb3MrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZFtwb3NdLmNvbG9yIHx8IHRoaXMuZ3JpZFtwb3NdLnNvbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2NoYW5nZUNlbGwocG9zLCBlbXB0eVRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3Bhd25OZXdQaWVjZSgpO1xuICAgICAgICB0aGlzLl9kcmF3UGllY2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZUxlZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGVhclBpZWNlKCk7XG4gICAgICAgIHRoaXMuX3BpZWNlLnN0b3JlKCk7XG5cbiAgICAgICAgdGhpcy5fcGllY2UubW92ZUxlZnQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbGxpZGVzTGVmdCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9waWVjZS5yZXZlcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYXdQaWVjZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlUmlnaHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGVhclBpZWNlKCk7XG4gICAgICAgIHRoaXMuX3BpZWNlLnN0b3JlKCk7XG5cbiAgICAgICAgdGhpcy5fcGllY2UubW92ZVJpZ2h0KCk7XG4gICAgICAgIGlmICh0aGlzLl9jb2xsaWRlc1JpZ2h0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3BpZWNlLnJldmVydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZHJhd1BpZWNlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJvdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xvY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2xlYXJQaWVjZSgpO1xuICAgICAgICB0aGlzLl9waWVjZS5zdG9yZSgpO1xuXG4gICAgICAgIHRoaXMuX3BpZWNlLnJvdGF0ZSgpO1xuICAgICAgICB3aGlsZSAodGhpcy5fY29sbGlkZXNSaWdodCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9waWVjZS5tb3ZlTGVmdCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fY29sbGlkZXNMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9waWVjZS5yZXZlcnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYXdQaWVjZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlRG93bigpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY2xlYXJGdWxsTGluZXMoKSB7XG4gICAgICAgIGZvciAobGV0IHJvdyA9IHRoaXMuX2dyaWRTaXplLmhlaWdodCAtIDE7IHJvdyA+PSAwOyByb3ctLSkge1xuICAgICAgICAgICAgbGV0IGlzRnVsbCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB0aGlzLl9ncmlkU2l6ZS53aWR0aDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSByb3cgKiB0aGlzLl9ncmlkU2l6ZS53aWR0aCArIGNvbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkW3Bvc10uc29saWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzRnVsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0Z1bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eVJvdyA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KHRoaXMuX2dyaWRTaXplLndpZHRoKSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoaWR4KSA9PiBuZXcgVGlsZSgpKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRvcFBvcnRpb24gPSB0aGlzLmdyaWQuc2xpY2UoMCwgcm93ICogdGhpcy5fZ3JpZFNpemUud2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkLnNwbGljZSgwLCArK3JvdyAqIHRoaXMuX2dyaWRTaXplLndpZHRoLCAuLi5lbXB0eVJvdy5jb25jYXQodG9wUG9ydGlvbikpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVDbGVhcmVkLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xvY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvY2tlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BpZWNlLnJldmVydCgpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyUGllY2UoKTtcbiAgICAgICAgdGhpcy5fcGllY2Uuc3RvcmUoKTtcblxuICAgICAgICB0aGlzLl9waWVjZS5tb3ZlRG93bigpO1xuICAgICAgICBpZiAodGhpcy5fY29sbGlkZXNCb3R0b20oKSkge1xuICAgICAgICAgICAgdGhpcy5fcGllY2UucmV2ZXJ0KCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJrU29saWQoKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdQaWVjZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jbGVhckZ1bGxMaW5lcygpO1xuXG4gICAgICAgICAgICB0aGlzLl9zcGF3bk5ld1BpZWNlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25HYW1lT3ZlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYXdQaWVjZSgpO1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pc0dhbWVPdmVyKCkge1xuICAgICAgICB0aGlzLl9waWVjZS5zdG9yZSgpO1xuICAgICAgICB0aGlzLl9waWVjZS5tb3ZlRG93bigpO1xuICAgICAgICBpZiAodGhpcy5fY29sbGlkZXNCb3R0b20oKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9waWVjZS5yZXZlcnQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uR2FtZU92ZXIoKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLl9nYW1lT3Zlci5uZXh0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc3Bhd25OZXdQaWVjZSgpIHtcbiAgICAgICAgdGhpcy5fcGllY2UgPSB0aGlzLl9waWVjZXNGYWN0b3J5LmdldFJhbmRvbVBpZWNlUGllY2UoU1BBV05fUE9TSVRJT05fWCwgU1BBV05fUE9TSVRJT05fWSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZUVtcHR5Qm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IGNlbGxzQ291bnQgPSB0aGlzLl9ncmlkU2l6ZS53aWR0aCAqIHRoaXMuX2dyaWRTaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5ncmlkID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoY2VsbHNDb3VudCkpXG4gICAgICAgICAgICAubWFwKChpZHgpID0+IG5ldyBUaWxlKCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NsZWFyUGllY2UoKSB7XG4gICAgICAgIHRoaXMuX3BpZWNlLnBvc2l0aW9uc09uR3JpZFxuICAgICAgICAgICAgLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX19jaGFuZ2VDZWxsKHBvcywge2NvbG9yOiB1bmRlZmluZWR9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2RyYXdQaWVjZSgpIHtcbiAgICAgICAgdGhpcy5fcGllY2UuY2xlYXJTdG9yZSgpO1xuICAgICAgICB0aGlzLl9waWVjZS5wb3NpdGlvbnNPbkdyaWRcbiAgICAgICAgICAgIC5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2hhbmdlQ2VsbChwb3MsIHtjb2xvcjogdGhpcy5fcGllY2UuY29sb3J9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX21hcmtTb2xpZCgpIHtcbiAgICAgICAgdGhpcy5fcGllY2UucG9zaXRpb25zT25HcmlkLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5fX2NoYW5nZUNlbGwocG9zLCB7c29saWQ6IHRydWV9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfX2NoYW5nZUNlbGwocG9zLCBkYXRhID0ge30pIHtcbiAgICAgICAgdGhpcy5ncmlkW3Bvc10gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdyaWRbcG9zXSwgZGF0YSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29sbGlkZXNCb3R0b20oKSB7XG4gICAgICAgIGlmICh0aGlzLl9waWVjZS5ib3R0b21Sb3cgPj0gdGhpcy5fZ3JpZFNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fX2NvbGxpZGVzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29sbGlkZXNMZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5fcGllY2UubGVmdENvbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX19jb2xsaWRlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NvbGxpZGVzUmlnaHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9waWVjZS5yaWdodENvbCA+PSB0aGlzLl9ncmlkU2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fX2NvbGxpZGVzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfX2NvbGxpZGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGllY2UucG9zaXRpb25zT25HcmlkXG4gICAgICAgICAgICAuc29tZSgocG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IDAgJiYgdGhpcy5ncmlkW3Bvc10gJiYgdGhpcy5ncmlkW3Bvc10uc29saWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19