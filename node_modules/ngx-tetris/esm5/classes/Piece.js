/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var PieceRotation = {
    DEG_0: 0,
    DEG_90: 1,
    DEG_180: 2,
    DEG_270: 3,
};
export { PieceRotation };
PieceRotation[PieceRotation.DEG_0] = 'DEG_0';
PieceRotation[PieceRotation.DEG_90] = 'DEG_90';
PieceRotation[PieceRotation.DEG_180] = 'DEG_180';
PieceRotation[PieceRotation.DEG_270] = 'DEG_270';
/** @enum {number} */
var PieceTypes = {
    Dot: 1,
    Box: 2,
    Line: 3,
    T: 4,
    L: 5,
    Lr: 6,
    Z: 7,
    S: 8,
};
export { PieceTypes };
PieceTypes[PieceTypes.Dot] = 'Dot';
PieceTypes[PieceTypes.Box] = 'Box';
PieceTypes[PieceTypes.Line] = 'Line';
PieceTypes[PieceTypes.T] = 'T';
PieceTypes[PieceTypes.L] = 'L';
PieceTypes[PieceTypes.Lr] = 'Lr';
PieceTypes[PieceTypes.Z] = 'Z';
PieceTypes[PieceTypes.S] = 'S';
/** @enum {string} */
var PieceColors = {
    Box: 'color-box',
    Dot: 'color-dot',
    Line: 'color-line',
    T: 'color-t',
    L: 'color-l',
    Lr: 'color-lr',
    Z: 'color-z',
    S: 'color-s',
};
export { PieceColors };
var Piece = /** @class */ (function () {
    function Piece(x, y, gridSize, maps) {
        this.color = 'red';
        this.rotation = PieceRotation.DEG_0;
        this.map = [
            [], []
        ];
        this._lastConfig = null;
        this._gridSize = gridSize;
        this.x = x;
        this.y = y;
        this._maps = maps;
        this.map = this._maps[this.rotation];
    }
    Object.defineProperty(Piece.prototype, "positionsOnGrid", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var acc = [];
            for (var row = 0; row < 4; row++) {
                for (var col = 0; col < 4; col++) {
                    if (this.map[row][col]) {
                        /** @type {?} */
                        var pos = (this.y + row) * this._gridSize.width + this.x + col;
                        if (pos > 0) {
                            acc.push(pos);
                        }
                    }
                }
            }
            return acc;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Piece.prototype.store = /**
     * @return {?}
     */
    function () {
        this._lastConfig = {
            x: this.x,
            y: this.y,
            rotation: this.rotation,
            map: this.map
        };
    };
    /**
     * @return {?}
     */
    Piece.prototype.clearStore = /**
     * @return {?}
     */
    function () {
        this._lastConfig = null;
    };
    /**
     * @return {?}
     */
    Piece.prototype.revert = /**
     * @return {?}
     */
    function () {
        if (this._lastConfig) {
            for (var x in this._lastConfig) {
                if (this._lastConfig.hasOwnProperty(x)) {
                    this[x] = this._lastConfig[x];
                }
            }
            this._lastConfig = null;
        }
    };
    /**
     * @return {?}
     */
    Piece.prototype.rotate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var keys = Object.keys(this._maps);
        /** @type {?} */
        var idx = keys.indexOf(this.rotation.toString());
        if (idx >= keys.length - 1) {
            this.rotation = /** @type {?} */ (keys[0]);
        }
        else {
            this.rotation = /** @type {?} */ (keys[++idx]);
        }
        this.map = this._maps[this.rotation];
    };
    /**
     * @return {?}
     */
    Piece.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        this.y++;
    };
    /**
     * @return {?}
     */
    Piece.prototype.moveRight = /**
     * @return {?}
     */
    function () {
        this.x++;
    };
    /**
     * @return {?}
     */
    Piece.prototype.moveLeft = /**
     * @return {?}
     */
    function () {
        this.x--;
    };
    Object.defineProperty(Piece.prototype, "bottomRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this.y + 3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Piece.prototype, "rightCol", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var col = 3;
            while (col >= 0) {
                for (var row = 0; row <= 3; row++) {
                    if (this.map[row][col]) {
                        return this.x + col;
                    }
                }
                col--;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Piece.prototype, "leftCol", {
        get: /**
         * @return {?}
         */
        function () {
            return this.x;
        },
        enumerable: true,
        configurable: true
    });
    return Piece;
}());
export { Piece };
if (false) {
    /** @type {?} */
    Piece.prototype.color;
    /** @type {?} */
    Piece.prototype.x;
    /** @type {?} */
    Piece.prototype.y;
    /** @type {?} */
    Piece.prototype.rotation;
    /** @type {?} */
    Piece.prototype._maps;
    /** @type {?} */
    Piece.prototype.map;
    /** @type {?} */
    Piece.prototype._gridSize;
    /** @type {?} */
    Piece.prototype._lastConfig;
}

//# sourceMappingURL=data:application/json;base64,