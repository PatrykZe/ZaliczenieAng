/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PiecesFactory } from '../classes/PiecesFactory';
import { Subject } from 'rxjs/internal/Subject';
/** @type {?} */
var SPAWN_POSITION_X = 4;
/** @type {?} */
var SPAWN_POSITION_Y = -4;
var Tile = /** @class */ (function () {
    function Tile() {
        this.solid = false;
        this.color = null;
    }
    return Tile;
}());
export { Tile };
if (false) {
    /** @type {?} */
    Tile.prototype.solid;
    /** @type {?} */
    Tile.prototype.color;
}
var GameManagerService = /** @class */ (function () {
    function GameManagerService() {
        this.settings = {
            tileSize: null
        };
        this._gridSize = { width: 0, height: 0 };
        this._locked = true;
        this._lineCleared = new Subject();
        this._gameOver = new Subject();
        this.lineCleared$ = this._lineCleared.asObservable();
        this.gameOver$ = this._gameOver.asObservable();
    }
    Object.defineProperty(GameManagerService.prototype, "elementsInRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._gridSize.width;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} width
     * @param {?} height
     * @param {?} gameSpeed
     * @param {?=} tileSize
     * @return {?}
     */
    GameManagerService.prototype.initialize = /**
     * @param {?} width
     * @param {?} height
     * @param {?} gameSpeed
     * @param {?=} tileSize
     * @return {?}
     */
    function (width, height, gameSpeed, tileSize) {
        this._gridSize.width = width;
        this._gridSize.height = height;
        this._gameSpeed = gameSpeed;
        this._piecesFactory = new PiecesFactory(this._gridSize);
        if (tileSize) {
            this.settings.tileSize = tileSize;
        }
        this._initializeEmptyBoard();
        this._spawnNewPiece();
        this._drawPiece();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.start = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearInterval(this._gameInterval);
        this._gameInterval = setInterval(function () {
            _this._update();
        }, this._gameSpeed);
        this._locked = false;
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.stop = /**
     * @return {?}
     */
    function () {
        this._locked = true;
        clearInterval(this._gameInterval);
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.reset = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var emptyTile = new Tile();
        for (var pos = 0; pos < this.grid.length; pos++) {
            if (this.grid[pos].color || this.grid[pos].solid) {
                this.__changeCell(pos, emptyTile);
            }
        }
        this._spawnNewPiece();
        this._drawPiece();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.moveLeft = /**
     * @return {?}
     */
    function () {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveLeft();
        if (this._collidesLeft()) {
            this._piece.revert();
        }
        this._drawPiece();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.moveRight = /**
     * @return {?}
     */
    function () {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveRight();
        if (this._collidesRight()) {
            this._piece.revert();
        }
        this._drawPiece();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.rotate = /**
     * @return {?}
     */
    function () {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.rotate();
        while (this._collidesRight()) {
            this._piece.moveLeft();
            if (this._collidesLeft()) {
                this._piece.revert();
                break;
            }
        }
        this._drawPiece();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        this._update();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._clearFullLines = /**
     * @return {?}
     */
    function () {
        for (var row = this._gridSize.height - 1; row >= 0; row--) {
            /** @type {?} */
            var isFull = true;
            for (var col = 0; col < this._gridSize.width; col++) {
                /** @type {?} */
                var pos = row * this._gridSize.width + col;
                if (this.grid[pos].solid === false) {
                    isFull = false;
                    break;
                }
            }
            if (isFull) {
                /** @type {?} */
                var emptyRow = Array.apply(null, Array(this._gridSize.width))
                    .map(function (idx) { return new Tile(); });
                /** @type {?} */
                var topPortion = this.grid.slice(0, row * this._gridSize.width);
                (_a = this.grid).splice.apply(_a, tslib_1.__spread([0, ++row * this._gridSize.width], emptyRow.concat(topPortion)));
                this._lineCleared.next();
            }
        }
        var _a;
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._update = /**
     * @return {?}
     */
    function () {
        if (this._locked) {
            return;
        }
        this._locked = true;
        this._piece.revert();
        this._clearPiece();
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            this._piece.revert();
            this._markSolid();
            this._drawPiece();
            this._clearFullLines();
            this._spawnNewPiece();
            if (this._isGameOver()) {
                this._onGameOver();
                return;
            }
        }
        this._drawPiece();
        this._locked = false;
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._isGameOver = /**
     * @return {?}
     */
    function () {
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            return true;
        }
        this._piece.revert();
        return false;
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._onGameOver = /**
     * @return {?}
     */
    function () {
        this.stop();
        this._gameOver.next();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._spawnNewPiece = /**
     * @return {?}
     */
    function () {
        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._initializeEmptyBoard = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cellsCount = this._gridSize.width * this._gridSize.height;
        this.grid = Array.apply(null, Array(cellsCount))
            .map(function (idx) { return new Tile(); });
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._clearPiece = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._piece.positionsOnGrid
            .forEach(function (pos) {
            _this.__changeCell(pos, { color: undefined });
        });
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._drawPiece = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._piece.clearStore();
        this._piece.positionsOnGrid
            .forEach(function (pos) {
            _this.__changeCell(pos, { color: _this._piece.color });
        });
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._markSolid = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._piece.positionsOnGrid.forEach(function (pos) {
            _this.__changeCell(pos, { solid: true });
        });
    };
    /**
     * @param {?} pos
     * @param {?=} data
     * @return {?}
     */
    GameManagerService.prototype.__changeCell = /**
     * @param {?} pos
     * @param {?=} data
     * @return {?}
     */
    function (pos, data) {
        if (data === void 0) { data = {}; }
        this.grid[pos] = Object.assign({}, this.grid[pos], data);
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._collidesBottom = /**
     * @return {?}
     */
    function () {
        if (this._piece.bottomRow >= this._gridSize.height) {
            return true;
        }
        return this.__collides();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._collidesLeft = /**
     * @return {?}
     */
    function () {
        if (this._piece.leftCol < 0) {
            return true;
        }
        return this.__collides();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype._collidesRight = /**
     * @return {?}
     */
    function () {
        if (this._piece.rightCol >= this._gridSize.width) {
            return true;
        }
        return this.__collides();
    };
    /**
     * @return {?}
     */
    GameManagerService.prototype.__collides = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._piece.positionsOnGrid
            .some(function (pos) {
            if (pos > 0 && _this.grid[pos] && _this.grid[pos].solid) {
                return true;
            }
            return false;
        });
    };
    GameManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GameManagerService.ctorParameters = function () { return []; };
    return GameManagerService;
}());
export { GameManagerService };
if (false) {
    /** @type {?} */
    GameManagerService.prototype.settings;
    /** @type {?} */
    GameManagerService.prototype.grid;
    /** @type {?} */
    GameManagerService.prototype.lineCleared$;
    /** @type {?} */
    GameManagerService.prototype.gameOver$;
    /** @type {?} */
    GameManagerService.prototype._gridSize;
    /** @type {?} */
    GameManagerService.prototype._piece;
    /** @type {?} */
    GameManagerService.prototype._piecesFactory;
    /** @type {?} */
    GameManagerService.prototype._locked;
    /** @type {?} */
    GameManagerService.prototype._gameSpeed;
    /** @type {?} */
    GameManagerService.prototype._gameInterval;
    /** @type {?} */
    GameManagerService.prototype._lineCleared;
    /** @type {?} */
    GameManagerService.prototype._gameOver;
}

//# sourceMappingURL=data:application/json;base64,