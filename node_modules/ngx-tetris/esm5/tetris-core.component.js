/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { GameManagerService } from './services/game-manager.service';
/** @type {?} */
var GAME_SPEED = 500;
/** @type {?} */
var MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed
/** @enum {number} */
var GameState = {
    Paused: 0,
    Started: 1,
    Over: 2,
};
export { GameState };
GameState[GameState.Paused] = 'Paused';
GameState[GameState.Started] = 'Started';
GameState[GameState.Over] = 'Over';
var TetrisCoreComponent = /** @class */ (function () {
    function TetrisCoreComponent(_manager) {
        var _this = this;
        this._manager = _manager;
        this.rotate = false;
        this.moveLeft = false;
        this.moveRight = false;
        this.moveDown = false;
        this.start = false;
        this.stop = false;
        this.reset = false;
        this.lineCleared = new EventEmitter();
        this.gameOver = new EventEmitter();
        this.state = GameState.Paused;
        this.gridWidth = 10;
        this.gridHeight = 20;
        this._manager.lineCleared$.subscribe(function (data) { return _this._onLineCleared(data); });
        this._manager.gameOver$.subscribe(function (data) { return _this._onGameOver(data); });
    }
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initialSpeed = this.initialSpeed || GAME_SPEED;
        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;
        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);
        this.grid = this._manager.grid;
        setInterval(function () {
            if (_this.moveDown) {
                _this._manager.moveDown();
            }
        }, this._moveDownSpeed);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TetrisCoreComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this._keyPressed(changes.moveLeft)) {
            this._manager.moveLeft();
        }
        else if (this._keyPressed(changes.moveRight)) {
            this._manager.moveRight();
        }
        if (this._keyPressed(changes.rotate)) {
            this._manager.rotate();
        }
        if (this._keyPressed(changes.start)) {
            this._manager.start();
        }
        if (this._keyPressed(changes.stop)) {
            this._manager.stop();
        }
        if (this._keyPressed(changes.reset)) {
            this._manager.reset();
        }
    };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionLeft = /**
     * @return {?}
     */
    function () { this._manager.moveLeft(); };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionRight = /**
     * @return {?}
     */
    function () { this._manager.moveRight(); };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionRotate = /**
     * @return {?}
     */
    function () { this._manager.rotate(); };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionDown = /**
     * @return {?}
     */
    function () { this._manager.moveDown(); };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionReset = /**
     * @return {?}
     */
    function () { this._manager.reset(); };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionStart = /**
     * @return {?}
     */
    function () {
        this._manager.start();
        this.state = GameState.Started;
    };
    /**
     * @return {?}
     */
    TetrisCoreComponent.prototype.actionStop = /**
     * @return {?}
     */
    function () {
        this._manager.stop();
        this.state = GameState.Paused;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TetrisCoreComponent.prototype._keyPressed = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key && key.currentValue && !key.previousValue;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TetrisCoreComponent.prototype._onLineCleared = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.lineCleared.emit(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TetrisCoreComponent.prototype._onGameOver = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.state = GameState.Over;
        this.gameOver.emit();
    };
    TetrisCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tetris-core',
                    template: "<board\n    [grid]=\"grid\"></board>\n"
                }] }
    ];
    /** @nocollapse */
    TetrisCoreComponent.ctorParameters = function () { return [
        { type: GameManagerService }
    ]; };
    TetrisCoreComponent.propDecorators = {
        tileSize: [{ type: Input }],
        initialSpeed: [{ type: Input }],
        rotate: [{ type: Input }],
        moveLeft: [{ type: Input }],
        moveRight: [{ type: Input }],
        moveDown: [{ type: Input }],
        start: [{ type: Input }],
        stop: [{ type: Input }],
        reset: [{ type: Input }],
        lineCleared: [{ type: Output }],
        gameOver: [{ type: Output }]
    };
    return TetrisCoreComponent;
}());
export { TetrisCoreComponent };
if (false) {
    /** @type {?} */
    TetrisCoreComponent.prototype.tileSize;
    /** @type {?} */
    TetrisCoreComponent.prototype.initialSpeed;
    /** @type {?} */
    TetrisCoreComponent.prototype.rotate;
    /** @type {?} */
    TetrisCoreComponent.prototype.moveLeft;
    /** @type {?} */
    TetrisCoreComponent.prototype.moveRight;
    /** @type {?} */
    TetrisCoreComponent.prototype.moveDown;
    /** @type {?} */
    TetrisCoreComponent.prototype.start;
    /** @type {?} */
    TetrisCoreComponent.prototype.stop;
    /** @type {?} */
    TetrisCoreComponent.prototype.reset;
    /** @type {?} */
    TetrisCoreComponent.prototype.lineCleared;
    /** @type {?} */
    TetrisCoreComponent.prototype.gameOver;
    /** @type {?} */
    TetrisCoreComponent.prototype.grid;
    /** @type {?} */
    TetrisCoreComponent.prototype.state;
    /** @type {?} */
    TetrisCoreComponent.prototype.gridWidth;
    /** @type {?} */
    TetrisCoreComponent.prototype.gridHeight;
    /** @type {?} */
    TetrisCoreComponent.prototype._moveDownSpeed;
    /** @type {?} */
    TetrisCoreComponent.prototype._manager;
}

//# sourceMappingURL=data:application/json;base64,