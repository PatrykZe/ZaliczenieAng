import { Observable } from 'rxjs/internal/Observable';
import * as ɵngcc0 from '@angular/core';
export declare class Tile {
    solid: boolean;
    color: any;
}
export declare class GameManagerService {
    settings: {
        tileSize: any;
    };
    readonly elementsInRow: number;
    grid: Array<Tile>;
    lineCleared$: Observable<any>;
    gameOver$: Observable<any>;
    private _gridSize;
    private _piece;
    private _piecesFactory;
    private _locked;
    private _gameSpeed;
    private _gameInterval;
    private _lineCleared;
    private _gameOver;
    constructor();
    initialize(width: number, height: number, gameSpeed: any, tileSize?: any): void;
    start(): void;
    stop(): void;
    reset(): void;
    moveLeft(): void;
    moveRight(): void;
    rotate(): void;
    moveDown(): void;
    private _clearFullLines();
    private _update();
    private _isGameOver();
    private _onGameOver();
    private _spawnNewPiece();
    private _initializeEmptyBoard();
    private _clearPiece();
    private _drawPiece();
    private _markSolid();
    private __changeCell(pos, data?);
    private _collidesBottom();
    private _collidesLeft();
    private _collidesRight();
    private __collides();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GameManagerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GameManagerService>;
}

//# sourceMappingURL=game-manager.service.d.ts.map